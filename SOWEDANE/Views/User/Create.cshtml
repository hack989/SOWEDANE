@model SOWEDANE.Models.UserModel;
@{
    ViewData["Title"] = "Create";
}

<!DOCTYPE html>
<html>
<head>
    <script src="https://code.jquery.com/jquery-3.6.4.min.js"></script>
    <title>User Registration</title>
    <style>
        body {
            background-color: #f5f5f5; /* Background color for the entire page */
            font-family: 'Arial', sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 150vh;
            margin: 0;
        }

        .registration-container {
            background: #2a2b38;
            padding: 20px;
            border-radius: 8px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.1); /* Box shadow for a subtle elevation effect */
            width: 300px;
            text-align: center;
            margin:auto;
        }

        h2 {
            color: #ffffff; /* Text color for the heading */
        }

        label {
            display: block;
            margin-top: -1px;
        }

        input {
            width: 100%;
            padding: 3px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        #submit {
            background-color: #4285f4; /* Button background color */
            color: #ffffff; /* Button text color */
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.3s ease; /* Smooth transition for background color */
        }

        #submit:hover {
            background-color: #3c79c8; /* Button background color on hover */
        }

        #Otp_area {
           /* margin-top: 20px;*/
            display: none;
        }

        #otp {
            width: 60%;
            padding: 10px;
            margin: 5px 0;
            border: 1px solid #ddd;
            border-radius: 4px;
            box-sizing: border-box;
        }

        #validateOtp {
            background-color: #4caf50; /* Button background color */
            color: #ffffff; /* Button text color */
            padding: 10px 20px;
            font-size: 16px;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            margin-top: 10px;
            transition: background-color 0.3s ease; /* Smooth transition for background color */
        }

         .field {
            margin-top: .5rem;
            display: flex;
            align-items: center;
            justify-content: center;
            gap: .5em;
            background-color: #1f2029;
            border-radius: 4px;
            padding: .5em 1em;
        }

        .input-icon {
            height: 1em;
            width: 1em;
            fill: #ffeba7;
        }

        .input-field {
            background: none;
            border: none;
            outline: none;
            width: 100%;
            color: #d3d3d3;
        }

        #validateOtp:hover {
            background-color: #45a049; /* Button background color on hover */
        }

        label
        {
             color: #f5f5f5;
        }

    </style>
</head>
<body>
    <div class="registration-container">
        <h2>User Registration</h2>
        @{
            string Mode = TempData["Mode"] as string ?? string.Empty;
            bool isEditMode = Mode == "Edit";
        }

         @if (isEditMode)
    {
        <script type="text/javascript">
         var isEditMode=true;
        </script>
    }
       @if (!isEditMode)
    {
        <script type="text/javascript">
         var isEditMode=false;
        </script>
    }

        @using (Html.BeginForm("Create", "User", FormMethod.Post, new { id = "UserRegistrationForm" }))
        {

             @Html.TextBoxFor(model => model.Id, new {hidden=true, placeholder = "Id",  @class = "input-field"})

            @Html.LabelFor(model => model.FirstName)
            <div class="field">
            @Html.TextBoxFor(model => model.FirstName, new {placeholder = "First Name", required = "required", @class = "input-field"})
            </div>
            @Html.ValidationMessageFor(model => model.FirstName)

            <br />

            @Html.LabelFor(model => model.LastName)
             <div class="field">
            @Html.TextBoxFor(model => model.LastName, new {placeholder = "LastName" ,required = "required", @class = "input-field" })
             </div>
            @Html.ValidationMessageFor(model => model.LastName)

            <br />


            @if (isEditMode)
{
    @Html.LabelFor(model => model.LoginName)
    <div class="field">    
        @Html.TextBoxFor(model => model.LoginName, new { placeholder = "LoginName", required = "required", @class = "input-field", disabled = isEditMode })
    </div>
    @Html.ValidationMessageFor(model => model.LoginName) 
}
else
{
    @Html.LabelFor(model => model.LoginName)
    <div class="field">    
        @Html.TextBoxFor(model => model.LoginName, new { placeholder = "LoginName", required = "required", @class = "input-field" })
    </div>
    @Html.ValidationMessageFor(model => model.LoginName)
}


            <br />

            @Html.LabelFor(model => model.PhoneNumber)
             <div class="field">
            @Html.TextBoxFor(model => model.PhoneNumber, new {placeholder = "PhoneNumber", required = "required", @class = "input-field" })
             </div>
            @Html.ValidationMessageFor(model => model.PhoneNumber)

            <br />
            @if (!isEditMode)
{
   

            @Html.LabelFor(model => model.Password)
             <div class="field">
            @Html.PasswordFor(model => model.Password, new {placeholder = "Password", required = "required", @class = "input-field" })
             </div>
            @Html.ValidationMessageFor(model => model.Password)

            <br />
}

            @Html.LabelFor(model => model.Email)
             <div class="field">
            @Html.TextBoxFor(model => model.Email, new {placeholder = "Email", type = "email", required = "required", @class = "input-field" })
             </div>
            @Html.ValidationMessageFor(model => model.Email)

            <br />

                @Html.LabelFor(model => model.City)
             <div class="field">
            @Html.DropDownListFor(model => model.City, Model.CityList, "City", new {placeholder="City" } )
             </div>
            @Html.ValidationMessageFor(model => model.Email)

            <br />
@if (isEditMode)
{
    <input id='submit' type="submit" value="Update" />
}
else
{
    <input id='submit' type="submit" value="Sign Up" />
}
        }

        <div id='Otp_area'>
            <input type='text' id="otp" />
            <button id='validateOtp'>Validate Otp</button>
        </div>
    </div>

    <script type="text/javascript">
        $(document).ready(function () {
            $('#Otp_area').hide();

            $('#UserRegistrationForm').submit(function (event) {
                event.preventDefault();
                //var tempDataValue = @Html.Raw(isEditMode);
                console.log("IsEdit Mode"+ isEditMode);
                var data = {
                    Id:$("#Id").val(),
                    FirstName: $("#FirstName").val(),
                    LastName: $("#LastName").val(),
                    Password: $("#Password").val(),
                    Email: $("#Email").val(),
                    PhoneNumber: $("#PhoneNumber").val(),
                    LoginName: $("#LoginName").val(),
                      City: $("#City").val()
                };
                console.log('test================>');
                $.ajax({
                    url: '/user/create',
                    type: 'POST',
                    dataType: 'JSON',
                    data: data,
                    success: function (response) {
                        // Handle the success response
                        if (response.success) {
                            if(!isEditMode)
                            {
                            $('#UserRegistrationForm').hide();
                            $('#Otp_area').show();
                            }
                            else
                            {
                            window.location.href='/user/dashboard';
                            }
                        }
                        console.log(response);
                    },
                    error: function (xhr, status, error) {
                        // Handle errors
                        console.error('Error:', error);
                    }
                });
            });

            
              var myButton = document.getElementById('validateOtp');

            // Attach a click event listener to the button
            myButton.addEventListener('click', function () {
                var loginNameFromCookie=getCookie('loginName');
                var otp=$('#otp').val();
              $.ajax({
                    url: '/userotp/validateOtp',
                    type: 'POST',
                    dataType: 'JSON',
                    data: {LoginName:loginNameFromCookie,otp:otp},
                    success: function (response) {
                        // Handle the success response
                        if (response.success) {
                           window.location.href = '/UserOtp/success';
                        }
                        console.log(response);
                    },
                    error: function (xhr, status, error) {
                        // Handle errors
                        console.error('Error:', error);
                    }
                });
               
            });

            function getCookie(cname) {
  let name = cname + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i <ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return "";
}

        });
    </script>
</body>
</html>
